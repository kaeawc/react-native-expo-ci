name: "Android Commit"

on:
  push:
    branches: [ "main" ]
  pull_request:
    paths:
      - '.github/android-commit.yml'
      - 'android/app/'
      - 'android/build.gradle.kts'
      - 'android/settings.gradle.kts'
      - 'android/gradle/wrapper/'
      - 'android/gradle.properties'

permissions:
  checks: write

env:
  # Setting an environment variable with the value of a configuration variable
  env_var: ${{ vars.ENV_CONTEXT_VAR }}

jobs:
  build_apk:
    name: "Build APK"
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - name: "Setup Node"
        uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: "npm"

      - name: "Restore Node Modules"
        id: cache-npm
        uses: actions/cache/restore@v3
        with:
          path: node_modules
          key: v1-${{ runner.os }}-node-modules-${{ hashFiles('package.json') }}-${{ hashFiles('package-lock.json') }}

      - name: "NPM Install"
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install --force

      - name: "Install JDK"
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: "Restore jemalloc"
        id: cache-jemalloc
        uses: actions/cache/restore@v3
        with:
          path: /tmp/libjemalloc.so.2
          key: v1-${{ runner.os }}-jemalloc-test

      - name: "Relocate jemalloc to expected directory"
        if: steps.cache-jemalloc.outputs.cache-hit == 'true'
        run: sudo mv /tmp/libjemalloc.so.2 /usr/local/lib/

      - name: "Download jemalloc"
        if: steps.cache-jemalloc.outputs.cache-hit != 'true'
        run: curl -Ls https://github.com/jemalloc/jemalloc/releases/download/5.3.0/jemalloc-5.3.0.tar.bz2 -o jemalloc-5.3.0.tar.bz2

      - name: "Unzip jemalloc"
        if: steps.cache-jemalloc.outputs.cache-hit != 'true'
        run: tar xvf jemalloc-5.3.0.tar.bz2

      - name: "Configure jemalloc"
        if: steps.cache-jemalloc.outputs.cache-hit != 'true'
        run: |
          cd jemalloc-5.3.0
          ./configure
          make
          sudo make install

      - name: "Configure LD_PRELOAD"
        run: |
          echo 'export LD_PRELOAD=/usr/local/lib/libjemalloc.so.2 app' >> $GITHUB_ENV
          cp /usr/local/lib/libjemalloc.so.2 /tmp/

      - name: "Save jemalloc"
        uses: actions/cache/save@v3
        if: steps.cache-jemalloc.outputs.cache-hit != 'true'
        with:
          path: /tmp/libjemalloc.so.2
          key: v1-${{ runner.os }}-jemalloc-test

      - name: "Download Gradle Profiler"
        run: curl -Ls https://repo1.maven.org/maven2/org/gradle/profiler/gradle-profiler/0.20.0/gradle-profiler-0.20.0.zip -o /tmp/gradle-profiler-0.20.0.zip

      - name: "Unzip Gradle Profiler"
        run: unzip /tmp/gradle-profiler-0.20.0.zip -d /tmp

      - name: "Create Gradle Profiler Report Directory"
        run: mkdir -p android/build/reports/gradle-profiler

      - name: "Print Java Flags & version"
        run: |
          java -XX:+UseParallelGC -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version

      - name: "Evaluate Gradle Flags"
        run: |

          # Note that we do not attempt to visually align JVM args - spaces included in kotlin.daemon.jvmargs causes the Kotlin compiler daemon to not run and fallback to Gradle in-process
          export GRADLE_FLAGS="
            --continue
            --stacktrace
            -Dorg.gradle.configuration-cache.internal.report-link-as-warning=true
            "

          # Remove any newlines or tabs from GRADLE_FLAGS
          export GRADLE_FLAGS="${GRADLE_FLAGS//[$'\t\r\n']}"

          # Write temporary file for checksum
          echo "$GRADLE_FLAGS" > /tmp/gradle_flags.txt

          # Also export it to system environment in case this gets used in other commands
          echo 'export GRADLE_FLAGS=$(cat /tmp/gradle_flags.txt)' >> $GITHUB_ENV

          echo "Printing evaluated Gradle flags"
          echo "GRADLE_FLAGS: $GRADLE_FLAGS"
          
          echo "Printing LD_PRELOAD"
          echo "LD_PRELOAD: $LD_PRELOAD"

      - name: "Restore Gradle Wrapper"
        id: cache-gradle-wrapper
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-wrapper-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Restore Gradle Home & Project Caches"
        id: cache-gradle-home-project
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/caches
            ./android/.gradle
          key:
            v1-${{ runner.os }}-gradle-home-project-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('android/**/*.gradle.kts') }}

      - name: "Restore Gradle Home Cache"
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
        id: cache-gradle-home
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/caches
          key:
            v1-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}
          restore-keys: |
            v1-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}
            v1-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
            v1-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}

      - name: "Restore Gradle Build Cache"
        id: cache-gradle-build
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/caches/build-cache-*
          key:
            v1-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.kt') }}
          restore-keys: |
            v1-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}
            v1-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}
            v1-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}
            v1-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}

#      - name: "Run Gradle Task with Profiler"
#        working-directory: ./android
#        run: |
#          /tmp/gradle-profiler-0.20.0/bin/gradle-profiler \
#            --project-dir ./ \
#            --profile chrome-trace \
#            --output-dir build/reports/gradle-profiler \
#            --gradle-user-home ~/.gradle \
#            --measure-config-time \
#            --measure-gc \
#            --iterations 1 \
#            --warmups 1 \
#            --measure-local-build-cache \
#            assembleDebug $GRADLE_FLAGS

      - name: "Run Gradle Task"
        working-directory: ./android
        run: ./gradlew assembleDebug $GRADLE_FLAGS

      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/android/build/test-results/testDebugUnitTest/TEST-*.xml'

      - name: "Store Gradle Profiler Report"
        uses: actions/upload-artifact@v3
        with:
          name: gradle-profiler-report
          path: |
            android/build/reports/gradle-profiler

      - name: "Store Configuration Cache Report"
        uses: actions/upload-artifact@v3
        with:
          name: configuration-cache-report
          path: |
            android/build/reports/configuration-cache/**/*.html

      - name: "Save Gradle Wrapper"
        uses: actions/cache/save@v3
        if: steps.cache-gradle-wrapper.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/wrapper
          key:
            v1-${{ runner.os }}-gradle-wrapper-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Save Gradle Build Cache"
        uses: actions/cache/save@v3
        if: steps.cache-gradle-build.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/caches/build-cache-*
          key:
            v1-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.kt') }}

      - name: "Prepare Gradle Project & Home Caches for Configuration Cache"
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
        run: |

          # TODO: Once convention plugins are added we will need to preserve its build folder
          echo "Preserve project Gradle cache"
          find .gradle -maxdepth 1 -type d \
            -regex ".gradle/.*" \
            -not -regex ".*/8.4" \
            -not -regex ".*/configuration-cache" | \
            xargs rm -rf

          echo " "
          echo "Preserve Gradle home cache"
          find ~/.gradle/caches -maxdepth 1 -type d \
            -regex ".*/caches/.*" \
            -not -regex ".*/8.4" \
            -not -regex ".*/modules-2" \
            -not -regex ".*/jars-9" \
            -not -regex ".*/transforms-3" | \
            xargs rm -rf

          echo " "
          echo "Preserve Gradle home configuration cache keystore and any generated Gradle jars"
          find ~/.gradle/caches/8.4 -maxdepth 1 -type d \
            -regex ".*/caches/8.4/.*" \
            -not -regex ".*/cc-keystore" \
            -not -regex ".*/kotlin-dsl" \
            -not -regex ".*/generated-gradle-jars" | \
            xargs rm -rf
          
          # Remove Kotlin build results from any convention plugin build folder

      - name: "Save Gradle Home & Project cache"
        uses: actions/cache/save@v3
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/caches
            .gradle
          key:
            v1-${{ runner.os }}-gradle-home-project-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}

      - name: "Prepare Gradle Home Cache with only Dependency & Script Caches"
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true' && steps.cache-gradle-home.outputs.cache-hit != 'true'
        run: |

          echo " "
          echo "Preserve Gradle home cache"
          find ~/.gradle/caches -maxdepth 1 -type d \
            -regex ".*/caches/.*" \
            -not -regex ".*/8.4" \
            -not -regex ".*/modules-2" | \
            xargs rm -rf
          
          echo " "
          echo "Preserve Gradle home configuration cache keystore and any generated Gradle jars"
          find ~/.gradle/caches/8.4 -maxdepth 1 -type d \
            -regex ".*/caches/8.4/.*" \
            -not -regex ".*/kotlin-dsl" \
            -not -regex ".*/generated-gradle-jars" | \
            xargs rm -rf

      - name: "Save Gradle Home cache"
        uses: actions/cache/save@v3
        if: steps.cache-gradle-home-project.outputs.cache-hit != 'true' && steps.cache-gradle-home.outputs.cache-hit != 'true'
        with:
          path: |
            ~/.gradle/caches
          key:
            v1-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('android/gradle/libs.versions.toml') }}-${{ hashFiles('android/gradle.properties') }}
